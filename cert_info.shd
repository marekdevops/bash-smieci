#!/bin/bash
#
# Script: cert_info.shd
# Description: Wyciąga certyfikaty z bundla i wyświetla informacje o nich (uproszczona wersja)
# Author: Marek
# Date: $(date +%Y-%m-%d)
# System: Red Hat Enterprise Linux / CentOS / Fedora
#

# Sprawdzenie czy openssl jest zainstalowane
if ! command -v openssl &> /dev/null; then
    echo "BŁĄD: openssl nie jest zainstalowane. Zainstaluj używając:"
    echo "sudo yum install openssl"
    echo "lub"  
    echo "sudo dnf install openssl"
    exit 1
fi

# Funkcja pomocy
show_help() {
    echo "Użycie: $0 [OPCJE] NAZWA_CERTYFIKATU PLIK_BUNDLA"
    echo ""
    echo "Wyciąga i wyświetla informacje o certyfikatach z bundla dla podanej nazwy."
    echo ""
    echo "Argumenty:"
    echo "  NAZWA_CERTYFIKATU  Nazwa certyfikatu do wyszukania (np. example.com)"
    echo "  PLIK_BUNDLA        Ścieżka do pliku z bundlem certyfikatów"
    echo ""
    echo "Opcje:"
    echo "  -h, --help         Wyświetl tę pomoc"
    echo "  -v, --verbose      Tryb szczegółowy"
    echo "  -d, --days LICZBA  Sprawdź certyfikaty wygasające w ciągu podanych dni (domyślnie: 30)"
    echo "  --debug            Tryb debugowania"
    echo ""
    echo "Przykłady:"
    echo "  $0 bko /etc/ssl/certs/ca-bundle.crt"
    echo "  $0 -d 60 google ./certificates.pem"
    echo "  $0 --debug example /path/to/bundle.pem"
}

# Domyślne wartości
VERBOSE=false
DEBUG=false
DAYS_WARNING=30

# Parsowanie argumentów
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        --debug)
            DEBUG=true
            shift
            ;;
        -d|--days)
            DAYS_WARNING="$2"
            if ! [[ "$DAYS_WARNING" =~ ^[0-9]+$ ]]; then
                echo "BŁĄD: Liczba dni musi być liczbą całkowitą"
                exit 1
            fi
            shift 2
            ;;
        -*)
            echo "Nieznana opcja: $1"
            show_help
            exit 1
            ;;
        *)
            break
            ;;
    esac
done

# Sprawdzenie argumentów
if [ $# -ne 2 ]; then
    echo "BŁĄD: Wymagane są dokładnie dwa argumenty"
    echo ""
    show_help
    exit 1
fi

CERT_NAME="$1"
BUNDLE_FILE="$2"

# Sprawdzenie czy plik bundla istnieje
if [ ! -f "$BUNDLE_FILE" ]; then
    echo "BŁĄD: Plik bundla '$BUNDLE_FILE' nie istnieje lub nie jest plikiem"
    exit 1
fi

# Sprawdzenie czy plik jest czytelny
if [ ! -r "$BUNDLE_FILE" ]; then
    echo "BŁĄD: Brak uprawnień do odczytu pliku '$BUNDLE_FILE'"
    exit 1
fi

# Funkcja do formatowania daty
format_date() {
    local date_str="$1"
    local timestamp=$(date -d "$date_str" +%s 2>/dev/null)
    if [ $? -eq 0 ]; then
        date -d "@$timestamp" '+%Y-%m-%d %H:%M:%S (%A)'
    else
        echo "$date_str"
    fi
}

# Funkcja do obliczania dni do wygaśnięcia
days_until_expiry() {
    local expiry_date="$1"
    local current_timestamp=$(date +%s)
    local expiry_timestamp=$(date -d "$expiry_date" +%s 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        local diff_seconds=$((expiry_timestamp - current_timestamp))
        local diff_days=$((diff_seconds / 86400))
        echo "$diff_days"
    else
        echo "N/A"
    fi
}

# Funkcja do wyświetlania kolorowego tekstu
print_colored() {
    local color="$1"
    local text="$2"
    case $color in
        red)    echo -e "\033[31m$text\033[0m" ;;
        green)  echo -e "\033[32m$text\033[0m" ;;
        yellow) echo -e "\033[33m$text\033[0m" ;;
        blue)   echo -e "\033[34m$text\033[0m" ;;
        *)      echo "$text" ;;
    esac
}

# Główna logika
echo "==============================================="
print_colored "blue" "🔍 Wyszukiwanie certyfikatów dla: $CERT_NAME"
echo "==============================================="
echo "📁 Plik bundla: $BUNDLE_FILE"
echo "📅 Data sprawdzenia: $(date '+%Y-%m-%d %H:%M:%S')"
echo ""

# Tymczasowy katalog na certyfikaty
TEMP_DIR=$(mktemp -d)
trap 'rm -rf "$TEMP_DIR"' EXIT

echo "🔎 Rozdzielanie certyfikatów z bundla..."

# Użyj prostej metody AWK do podziału bundla - sprawdzona i niezawodna
awk '
BEGIN { cert_num = 0 }
/-----BEGIN CERTIFICATE-----/ {
    cert_num++
    filename = "'$TEMP_DIR'/cert_" cert_num ".pem"
    print $0 > filename
    in_cert = 1
    next
}
/-----END CERTIFICATE-----/ {
    if (in_cert) {
        print $0 >> filename
        close(filename)
        in_cert = 0
    }
    next
}
in_cert {
    print $0 >> filename
}
END { print "Podzielono na " cert_num " certyfikatów" }
' "$BUNDLE_FILE"

# Policz ile plików certyfikatów zostało utworzonych
cert_files=($(ls "$TEMP_DIR"/cert_*.pem 2>/dev/null))
total_certs=${#cert_files[@]}

echo "� Utworzono $total_certs plików certyfikatów"
echo ""

# Liczniki
found_count=0
expired_count=0  
expiring_soon_count=0

echo "🔍 Wyszukiwanie certyfikatów zawierających: '$CERT_NAME'"
echo ""

# Przeszukaj każdy certyfikat
for cert_file in "${cert_files[@]}"; do
    [ -f "$cert_file" ] || continue
    
    cert_num=$(basename "$cert_file" .pem | sed 's/cert_//')
    
    # Sprawdź poprawność certyfikatu
    if ! openssl x509 -in "$cert_file" -noout 2>/dev/null; then
        [ "$DEBUG" = true ] && echo "❌ Certyfikat $cert_num: uszkodzony, pomijam"
        continue
    fi
    
    # Pobierz informacje o certyfikacie
    cert_text=$(openssl x509 -in "$cert_file" -text -noout 2>/dev/null)
    cert_subject=$(openssl x509 -in "$cert_file" -subject -noout 2>/dev/null | sed 's/subject=//')
    
    # Debug info
    if [ "$DEBUG" = true ]; then
        echo "🔍 Certyfikat $cert_num: $cert_subject"
        echo "   Szukam: '$CERT_NAME'"
    fi
    
    # PROSTE wyszukiwanie - jeśli nazwa występuje GDZIEKOLWIEK w certyfikacie
    if echo "$cert_text" | grep -qi "$CERT_NAME"; then
        found_count=$((found_count + 1))
        
        [ "$DEBUG" = true ] && echo "   ✅ ZNALEZIONO!"
        
        echo "🎯 ZNALEZIONY CERTYFIKAT #$found_count (z pliku cert_$cert_num.pem)"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        # Subject (właściciel certyfikatu)
        subject=$(echo "$cert_text" | grep "Subject:" | sed 's/.*Subject: //')
        echo "👤 Właściciel: $subject"
        
        # Issuer (wystawca)  
        issuer=$(echo "$cert_text" | grep "Issuer:" | sed 's/.*Issuer: //')
        echo "🏢 Wystawca: $issuer"
        
        # Serial Number
        serial=$(echo "$cert_text" | grep "Serial Number:" | sed 's/.*Serial Number: *//')
        echo "🔢 Numer seryjny: $serial"
            
        # Daty ważności
        not_before=$(openssl x509 -in "$cert_file" -startdate -noout 2>/dev/null | sed 's/notBefore=//')
        not_after=$(openssl x509 -in "$cert_file" -enddate -noout 2>/dev/null | sed 's/notAfter=//')
        
        echo "📅 Ważny od: $(format_date "$not_before")"
        echo "📅 Ważny do: $(format_date "$not_after")"
        
        # Status certyfikatu
        days_left=$(days_until_expiry "$not_after")
        
        if [ "$days_left" != "N/A" ]; then
            if [ "$days_left" -lt 0 ]; then
                expired_count=$((expired_count + 1))
                print_colored "red" "⚠️  STATUS: WYGASŁY (od $((-days_left)) dni)"
            elif [ "$days_left" -le "$DAYS_WARNING" ]; then
                expiring_soon_count=$((expiring_soon_count + 1))
                print_colored "yellow" "⚠️  STATUS: WYGASA WKRÓTCE (za $days_left dni)"
            else
                print_colored "green" "✅ STATUS: WAŻNY (wygasa za $days_left dni)"
            fi
        else
            print_colored "yellow" "❓ STATUS: Nie można określić"
        fi
        
        # Subject Alternative Names (SAN)
        san=$(echo "$cert_text" | grep -A5 "Subject Alternative Name:" | grep "DNS:" | sed 's/.*DNS://g' | tr ',' '\n' | sed 's/^[ \t]*//' | head -10)
        if [ ! -z "$san" ]; then
            echo "🌐 Alternatywne nazwy:"
            echo "$san" | while read -r name; do
                [ ! -z "$name" ] && echo "   • $name"
            done
        fi
        
        # Verbose mode
        if [ "$VERBOSE" = true ]; then
            echo ""
            echo "📋 SZCZEGÓŁOWE INFORMACJE:"
            
            # Algorytm podpisu
            sig_alg=$(echo "$cert_text" | grep "Signature Algorithm:" | head -n1 | sed 's/.*Signature Algorithm: //')
            echo "   🔐 Algorytm podpisu: $sig_alg"
            
            # Fingerprint
            fingerprint=$(openssl x509 -in "$cert_file" -fingerprint -sha256 -noout 2>/dev/null | sed 's/SHA256 Fingerprint=//')
            [ ! -z "$fingerprint" ] && echo "   👆 SHA256: $fingerprint"
        fi
        
        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        
    else
        [ "$DEBUG" = true ] && echo "   ❌ Nie zawiera '$CERT_NAME'"
    fi
done

done

# Podsumowanie
echo ""
echo "📊 PODSUMOWANIE"
echo "==============="
echo "🔍 Wyszukiwane: '$CERT_NAME'"
echo "🔢 Przetworzonych certyfikatów: $total_certs"
echo "📁 Bundle: $BUNDLE_FILE"
echo "🎯 Znaleziono: $found_count certyfikat(y/ów)"

if [ "$found_count" -gt 0 ]; then
    if [ "$expired_count" -gt 0 ]; then
        print_colored "red" "❌ Wygasłe: $expired_count"
    fi
    if [ "$expiring_soon_count" -gt 0 ]; then
        print_colored "yellow" "⚠️  Wygasające wkrótce (≤$DAYS_WARNING dni): $expiring_soon_count"
    fi
    
    valid_count=$((found_count - expired_count - expiring_soon_count))
    if [ "$valid_count" -gt 0 ]; then
        print_colored "green" "✅ Ważne: $valid_count"
    fi
else
    print_colored "yellow" "ℹ️  Brak wyników dla '$CERT_NAME'"
    echo ""
    echo "💡 Spróbuj:"
    echo "   • Sprawdzić pisownię nazwy"
    echo "   • Użyć opcji --debug"
    echo "   • Sprawdzić format bundla (musi być PEM)"
fi

echo ""
echo "✅ Zakończono: $(date '+%H:%M:%S')"